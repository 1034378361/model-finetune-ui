[project]
name = "model-finetune-ui"
version = "1.1.0"
description = "基于Streamlit构建的Web UI项目，用于模型微调和水质数据处理"
authors = [
    {name = "Model Finetune Team"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
keywords = ["streamlit", "water-quality", "model", "finetune"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
]

dependencies = [
    "streamlit>=1.28.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
    "cryptography>=41.0.0",
    "autowaterqualitymodeler>=4.0.5",
    "python-dotenv>=1.0.0",
    "openpyxl>=3.1.0",
    "xlrd>=2.0.0",
    "chardet>=5.0.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.0.280",
    "mypy>=1.5.0",
    "streamlit-option-menu>=0.3.6",
    "streamlit-aggrid>=0.3.4",
]

[project.scripts]
model-finetune-ui = "model_finetune_ui.run:main"
generate-sample-data = "model_finetune_ui.examples.generate_sample_data:main"

[project.urls]
Homepage = "https://github.com/your-org/model-finetune-ui"
Documentation = "https://github.com/your-org/model-finetune-ui/blob/main/README.md"
Repository = "https://github.com/your-org/model-finetune-ui.git"
Issues = "https://github.com/your-org/model-finetune-ui/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.0.280",
    "mypy>=1.5.0",
    "streamlit-option-menu>=0.3.6",
    "streamlit-aggrid>=0.3.4",
]

[tool.uv.sources]
# 可以在这里指定特定包的源（如果需要）

[tool.uv.workspace]
# 如果这是一个workspace的一部分，可以在这里配置

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.metadata]
allow-direct-references = true

# Ruff配置
[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__.py

# Black配置
[tool.black]
target-version = ['py310', 'py311', 'py312']
line-length = 88
skip-string-normalization = true

# MyPy配置
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "streamlit",
    "pandas",
    "numpy",
    "matplotlib.*",
    "seaborn",
    "plotly.*",
]
ignore_missing_imports = true

# Pytest配置
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
pythonpath = ["."]
